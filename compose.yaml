
services:
  app:
    image: node-rest-api:v1.0.1
    build: 
      context: .
      dockerfile: Dockerfile
    user: appuser
    container_name: node-rest-api-container
    ports:
      - "3000:3000"
    volumes:
      - .:/app
    environment:
      - NODE_ENV=development
    env_file:
      - .env.app
    networks:
      - app-network
      - db-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:8.2-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    env_file:
      - .env.redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  nginx:
    image: nginx:1.29-alpine-perl
    container_name: nginx-container
    ports:
      - "80:80"
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - logs:/var/log/nginx
    env_file:
      - .env.nginx
    networks: 
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  postgres:
    image: postgres:18.0
    container_name: postgres-container
    user: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=mydatabase
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env.postgres
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  nginx-conf:
    driver: local
  pgdata:
    driver: local
  logs:
    driver: local

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge



